/**
 * Created by Rama on 2019-06-13.
 */
({
    doInit: function(component, helper) {
    var action = component.get("c.intitializePage");
            action.setCallback(this, function(response) {
                var state = response.getState();
                if (state === "SUCCESS") {
                    var result = response.getReturnValue();
                    console.log('result..!', result);

                    // Set if Ed-Fi is enabled
                    component.set('v.enableEdFi', result.enableEdFi);

                    // Populate the knowledge url
                    component.set('v.knowledgeURL', result.viewAccessLevelsURL);

                    // Set if TAA is enabled
                    component.set('v.enableTAA', result.enableTAA);
                }
                else if (state === "ERROR") {
                    var errors = response.getError();
                    console.log('errors..!', errors);
                }
            });
            $A.enqueueAction(action);
        },

    selectView: function(component, helper, newView) {
        // Load the new view
        component.set("v.selectedView", newView);
        component.set("v.selectedViewLowerCase", newView.toLowerCase());
        component.set("v.selectOptionTitle", newView);
        component.set("v.boolDisableCodeSection",false);
        component.set("v.validateCount",0);
    },

    spinnerHide: function(component) {
        var spinner = component.find("loadingSpinner");

        // Hide the spinner
        $A.util.addClass(spinner, "slds-hide");
    },

    spinnerShow: function(component) {
        var spinner = component.find("loadingSpinner");
        $A.util.removeClass(spinner, "slds-hide");
    },
    applyRequestedAccessHelper : function(component,helper) {

        // Show the spinner
        helper.spinnerShow(component);

        //Collect requested access details.
        var blnCheckedDV = component.get("v.checkedDV");
        var blnCheckedSV = component.get("v.checkedSV");
        var blnMakeEdFi = component.get("v.makeEdFi");
        var blnMakeTAA = component.get("v.makeTAA");
        var blnMakeTrustedAgent = component.get("v.makeTrustedAgent");
        var strAccessLevel = '';

        //Get the account information.
        var objAccount = component.get("v.selectedRecord");

        // Determine the access level
        if (blnMakeTrustedAgent) {
            strAccessLevel = 'Trusted Agent';
        }
        else if (blnCheckedDV) {
            strAccessLevel = 'Detail Viewer';
        }
        else {
            strAccessLevel = blnCheckedSV ? 'Summary Viewer' : 'None';
        }

        var objRequest = {
            AccessLevel : strAccessLevel,
            AccountId : objAccount.Id,
            EdFiAccess : blnMakeEdFi,
            TAALevel : blnMakeTAA
        }

        // Set the trusted agent values
        if (strAccessLevel == 'Trusted Agent') {
            objRequest.EdFiAccess = true;
            objRequest.TAALevel = true;
        }

        //Set the parameters to be sent.
        var strParams = {
            "strRequestedAccess" : JSON.stringify(objRequest)
        };

        // Apply the access levels.
        helper.doCallout(component, helper, "c.handleRequestedAccess", strParams).then(function(response) {

            if (response == true) {
                //Display the success message.
                helper.showMessage('success', 'Request access processed successfully.', false);

                //Clear all requested access levels.
                component.set("v.checkedDV",null);
                component.set("v.checkedSV",null);
                component.set("v.makeEdFi",false);
                component.set("v.makeTAA",false);
                component.set("v.makeTrustedAgent",false);
                component.set("v.selectedRecord",null);
                component.set("v.boolRequestMoreAccess",false);
                component.set("v.boolMyAccessBtn",true);
            }

            // Hide the spinner
        	helper.spinnerHide(component);
        }).catch(function(errors) {
            if (errors) {
                helper.showMessage('Error', errors[0].message, true);
            }

            // Hide the spinner
        	helper.spinnerHide(component);
        });
    },
    processRequestForMoreAccessHelper : function(component,helper) {
        //Hide spinner
        helper.spinnerShow(component);

        //Default all required boolean variables.
        component.set('v.boolShowMyAccess',false);
        component.set('v.boolShowEdFIReport',false);
        component.set('v.boolShowOnlineReport',false);
        component.set('v.boolIsTrustedAgent',false);
        component.set('v.makeTrustedAgent',false);
        component.set('v.boolShowTAARole',false);
        component.set('v.boolRequestMoreAccess',false);
        component.set('v.boolACRAvailable',true);



        let objSelectedRecord = component.get('v.selectedRecord');
        if($A.util.isUndefinedOrNull(objSelectedRecord) || JSON.stringify(objSelectedRecord) === '{}'){
            return;
        }
        let params = {
            "strAccount" : JSON.stringify(objSelectedRecord)
        }

        //Fetch all access levels.
        helper.doCallout(component, helper, "c.fetchMyOrganizationAccess", params).then(function(response) {
            if(! $A.util.isUndefinedOrNull(response) && response !== 'ACR Exists'){
                const objAccount = JSON.parse(response);
                if(! $A.util.isUndefinedOrNull(objAccount.SAO_Ed_Fi_Admin) && objAccount.SAO_Ed_Fi_Admin){
                    component.set('v.boolShowEdFIReport',true);
                }
                if(! $A.util.isUndefinedOrNull(objAccount.eMetrics_Role__c) && objAccount.eMetrics_Role__c){
                    component.set('v.boolShowOnlineReport',true);
                    component.set('v.strEmetricRole',objAccount.eMetrics_Role__c);

                    //Highlight summary / detail viewer section.
                    if(objAccount.eMetrics_Role__c == 'Normal-Limited'){
                        component.set('v.checkedSV','checked');
                        component.set('v.checkedDV',null);
                    }
                    if(objAccount.eMetrics_Role__c == 'Normal-Full'){
                        component.set('v.checkedDV','checked');
                        component.set('v.checkedSV',null);
                    }
                }
                if(! $A.util.isUndefinedOrNull(objAccount.SAO_Trusted_Agent) && objAccount.SAO_Trusted_Agent){
                    component.set('v.makeTrustedAgent',true);
                    component.set('v.boolIsTrustedAgent',true);
                }
                if(! $A.util.isUndefinedOrNull(objAccount.SAO_TAA) && objAccount.SAO_TAA){
                    component.set('v.boolShowTAARole',true);
                }
            }
            if($A.util.isUndefinedOrNull(response)){
                component.set('v.boolACRAvailable',false);
            }
            component.set('v.boolRequestMoreAccess',true);

            //Store all access levels to toggle submit button.
            const objAccessLevels = {
                boolIsTrustedAgent : component.get('v.boolIsTrustedAgent'),
                boolShowEdFIReport : component.get('v.boolShowEdFIReport'),
                boolShowTAARole : component.get('v.boolShowTAARole')
            }

            if(component.get('v.strEmetricRole') === 'Normal-Full'){
                objAccessLevels.boolShowOnlineReport = 'checkedDV';
            } else if(component.get('v.strEmetricRole') === 'Normal-Limited'){
                objAccessLevels.boolShowOnlineReport = 'checkedSV';
            } else {
                objAccessLevels.boolShowOnlineReport = 'none';
            }
            component.set('v.strAccessLevels',JSON.stringify(objAccessLevels));
            component.set('v.boolDisableReqMoreBtn',true);

            helper.spinnerHide(component);
        }).catch(function(errors) {
            console.log('errors = ' + errors);

            if (errors) {
                helper.showMessage('Error', errors[0].message, true);
            }

            // Hide the spinner, loading
            helper.spinnerHide(component);
        });
    },
    toggleMoreAccessBtnHelper : function(component,helper,event) {

        //Logic to toggle submit button.
        const strAccessLevels = component.get('v.strAccessLevels');
        const objAccessLevels = JSON.parse(strAccessLevels);
        var strClickedElement = event.getSource().getLocalId();
        if(strClickedElement){
            let objModifiedAccessLevels;
            let modifiedValue;
            try{
                modifiedValue = component.find(strClickedElement).get('v.checked');
            }catch(exception){
                modifiedValue = component.find(strClickedElement)[0].get('v.checked');
            }
            if(strClickedElement === 'makeTrustedAgent'){
                objModifiedAccessLevels = {
                    boolIsTrustedAgent : modifiedValue,
                    boolShowEdFIReport : component.get('v.makeEdFi'),
                    boolShowTAARole : component.get('v.makeTAA')
                }
            } else if(strClickedElement === 'makeEdFi'){
                objModifiedAccessLevels = {
                    boolIsTrustedAgent : component.get('v.makeTrustedAgent'),
                    boolShowEdFIReport : modifiedValue,
                    boolShowTAARole : component.get('v.makeTAA')
                }
            } else if(strClickedElement === 'makeTAA'){
                objModifiedAccessLevels = {
                    boolIsTrustedAgent : component.get('v.makeTrustedAgent'),
                    boolShowEdFIReport : component.get('v.makeEdFi'),
                    boolShowTAARole : modifiedValue
                }
            }

            if(component.get('v.checkedSV') == 'checked'){
                objModifiedAccessLevels.boolShowOnlineReport = 'checkedSV';
            } else if (component.get('v.checkedDV') == 'checked'){
                objModifiedAccessLevels.boolShowOnlineReport = 'checkedDV';
            } else {
                objModifiedAccessLevels.boolShowOnlineReport = 'none';
            }
            if(objModifiedAccessLevels.boolIsTrustedAgent != objAccessLevels.boolIsTrustedAgent ||
               objModifiedAccessLevels.boolShowEdFIReport != objAccessLevels.boolShowEdFIReport ||
               objModifiedAccessLevels.boolShowTAARole != objAccessLevels.boolShowTAARole ||
               objModifiedAccessLevels.boolShowOnlineReport != objAccessLevels.boolShowOnlineReport){
                component.set('v.boolDisableReqMoreBtn',false);
            }else {
                component.set('v.boolDisableReqMoreBtn',true);
            }
        }
    },
    processMyAccessHelper: function(component,helper) {

        helper.spinnerShow(component);

        component.set('v.boolShowMyAccess',false);
        component.set('v.boolShowEdFIReport',false);
        component.set('v.boolShowOnlineReport',false);
        component.set('v.boolIsTrustedAgent',false);
        component.set('v.boolIsStateTrustedAgent',false);
        component.set('v.boolIsTestCoordinatorRole',false);


        let objSelectedRecord = component.get('v.selectedRecord');
        if($A.util.isUndefinedOrNull(objSelectedRecord) || JSON.stringify(objSelectedRecord) === '{}'){
            return;
        }
        let params = {
            "strAccount" : JSON.stringify(objSelectedRecord)
        }
        helper.doCallout(component, helper, "c.fetchMyOrganizationAccess", params).then(function(response) {
            if(! $A.util.isUndefinedOrNull(response) && response !== 'ACR Exists'){
                const objAccount = JSON.parse(response);
                if(! $A.util.isUndefinedOrNull(objAccount.SAO_Ed_Fi_Admin) && objAccount.SAO_Ed_Fi_Admin){
                    component.set('v.boolShowEdFIReport',true);
                }
                if(! $A.util.isUndefinedOrNull(objAccount.eMetrics_Role__c) && objAccount.eMetrics_Role__c){
                    component.set('v.boolShowOnlineReport',true);
                    component.set('v.strEmetricRole',objAccount.eMetrics_Role__c);
                }
                if((! $A.util.isUndefinedOrNull(objAccount.SAO_Trusted_Agent) && objAccount.SAO_Trusted_Agent) && (! $A.util.isUndefinedOrNull(objAccount.eMetric_Org_Type__c) && objAccount.eMetric_Org_Type__c != 'S')){
                    component.set('v.boolIsTrustedAgent',true);
                }
                if((! $A.util.isUndefinedOrNull(objAccount.SAO_Trusted_Agent) && objAccount.SAO_Trusted_Agent) && (! $A.util.isUndefinedOrNull(objAccount.eMetric_Org_Type__c) && objAccount.eMetric_Org_Type__c == 'S')){
                                    component.set('v.boolIsStateTrustedAgent',true);
                }
                if(! $A.util.isUndefinedOrNull(objAccount.SAO_Test_Coordinator) && objAccount.SAO_Test_Coordinator){
                                    component.set('v.boolIsTestCoordinatorRole',true);
                                }
                if(! $A.util.isUndefinedOrNull(objAccount.ViewAccessLevels_URL)){
                    component.set('v.knowledgeURL',objAccount.ViewAccessLevels_URL);
                }
            }
            helper.spinnerHide(component);
            component.set('v.boolShowMyAccess',true);
        }).catch(function(errors) {
            console.log('errors = ' + errors);

            if (errors) {
                helper.showMessage('Error', errors[0].message, true);
            }

            // Hide the spinner, loading
            helper.spinnerHide(component);
        });
    },
    validateAccessCodeHelper : function(component,helper) {
        helper.spinnerShow(component);

        component.set("v.trustedAgentType",'');
        var action = component.get("c.validateAccesCodeAndAccount");
        var resultsToast = $A.get("e.force:showToast");

        var selectedAccountId = component.get("v.selectedAccountRecord.Id");
        action.setParams({
            accessCode: component.get("v.accessCode"),
            accountId : selectedAccountId
        });
        action.setCallback(this, function(response){

            var state = response.getState();

            if (state === "SUCCESS")
            {

                var returnValue = response.getReturnValue();

                if(returnValue.startsWith('valid'))
                {
                    component.set("v.disableshowAccess",true);
                    component.set("v.accessCodeId",returnValue.split(";")[1]);
                    component.set("v.accessCodeUsage",returnValue.split(";")[2]);
                    component.set("v.trustedAgentType",returnValue.split(";")[3]);
                    component.set("v.validateResponse", "valid");
                    component.set("v.validateCount",0);
                    component.set("v.boolDisableCodeSection",true);

                    resultsToast.setParams({
                        title: "Valid access code:",
                        message: "This code is a valid access code",
                        type: "success",
                        duration : 3000
                    });
                    // Fire error toaster message
                    resultsToast.fire();


                }
                else if (returnValue.startsWith('more'))
                {

                    var count = component.get("v.validateCount") + 1;
                    component.set("v.validateCount" ,count);
                    component.set("v.validateResponse", "more");
                    component.set("v.accessCodeId",returnValue.split(";")[1]);
                    component.set("v.disableshowAccess",true);
                    component.set("v.validateCount",0);
                    component.set("v.boolDisableCodeSection",true);

                    //helper.checkDisableButton(component);
                    resultsToast.setParams({
                        title: "Invalid access code:",
                        message: "This code has been used more than ten times. If you feel this level of access is correct, please submit the Access Request and it will be submitted for review by your District’s trusted agents.",
                        type: "warning",
                        duration : 3000
                    });
                    resultsToast.fire();
                }
                    else if(returnValue =='Invalid')
                    {
                        var count = component.get("v.validateCount") + 1;
                        component.set("v.validateCount" ,count);
                        component.set("v.validateResponse", "Invalid");
                        helper.spinnerHide(component);
                        if(count >=3)
                        {
                            component.set("v.disableshowAccess",true);
                            //helper.checkDisableButton(component);
                            resultsToast.setParams({
                                title: "Invalid access code:",
                                message: "This code is either incorrect or not valid. Please double-check your entry. If it's correct, submit the form and it will be manually reviewed by ACT",
                                type: "warning",
                                duration : 3000
                            });
                            resultsToast.fire();
                        }

                        else
                        {
                            resultsToast.setParams({

                                title: "Invalid access code:",
                                message: "This code is either incorrect or not valid. Please double-check your entry.",
                                type: "warning",
                                duration : 3000
                            });

                            resultsToast.fire();
                        }
                    }
                helper.spinnerHide(component);

            }
            else
            {
                helper.spinnerHide(component);
                var strError = response.getError()[0].message;
                resultsToast.setParams({
                    title: "invalid access code:",
                    message: strError,
                    type: "error",
                    duration : 3000
                });
                // Fire error toaster message
                resultsToast.fire();
            }
        });



        $A.enqueueAction(action);
    },
    applyValidAccessToProfileHelper : function(component, event, helper) {
        let objselectedAccountRecord = component.get('v.selectedAccountRecord');
        let strSelectRecord = JSON.stringify(objselectedAccountRecord);

        if($A.util.isUndefinedOrNull(strSelectRecord) || $A.util.isEmpty(strSelectRecord) || strSelectRecord == "{}"){
            helper.showMessage('Warning', 'Please select an Account/Organization.', false);
            return;
        }

        helper.spinnerShow(component);
        const trustedAgentType = component.get('v.trustedAgentType');
        let objAccessDetail = {
            accountId : component.get("v.selectedAccountRecord.Id"),
            accessToken : component.get("v.accessCode"),
        };

        let params = {
            "strAccessInfo" : JSON.stringify(objAccessDetail)
        }

        helper.doCallout(component, helper, "c.applyRequestedPermissions", params).then(function(response) {
            helper.spinnerHide(component);

            switch (response) {
                case 'Duplicate':
                    helper.showMessage('Error', 'You already have the access that this code grants.', true);
                    break;

                case 'Invalid':
                    helper.showMessage('Error', 'An error happened trying to process this request.', true);
                    //helper.showMessage('Warning', 'This code is either invalid or not correct', true);
                    helper.gotoUrl(component, helper, '/s/');
                    break;

                case 'Success':
                    helper.showMessage('Success', 'Request access processed successfully.', false);
                    helper.gotoUrl(component, helper, '/');
                    break;
            }
        }).catch(function(errors) {

            // Hide the spinner, loading
            helper.spinnerHide(component);

            if (errors) {
                helper.showMessage('Error', errors[0].message, true);
            }

            window.setTimeout(
                $A.getCallback(function() {

                    //Redirect to home page
                    let urlEvent = $A.get("e.force:navigateToURL");

                    urlEvent.setParams({
                        "url": '/?uid=' + (new Date).getTime()
                    });

                    urlEvent.fire();

                }), 2000
            ); // setTimeout
        });
    },
    enableDisableMyAccessBtnHelper : function(component, event, helper) {

        let objSelectedRecord = component.get('v.selectedRecord');
        let strSelectRecord = JSON.stringify(objSelectedRecord);
        if($A.util.isUndefinedOrNull(strSelectRecord) || $A.util.isEmpty(strSelectRecord) || strSelectRecord == '{}'){
            component.set('v.boolMyAccessBtn',true);

            //Close Request more access section.
            component.set("v.checkedDV",null);
            component.set("v.checkedSV",null);
            component.set("v.makeEdFi",false);
            component.set("v.makeTAA",false);
            component.set("v.makeTrustedAgent",false);
            component.set("v.boolRequestMoreAccess",false);

            component.set('v.boolShowMyAccess',false);
            component.set('v.boolShowEdFIReport',false);
            component.set('v.boolShowOnlineReport',false);
            component.set('v.boolIsTrustedAgent',false);
            component.set('v.boolRequestMoreAccess',false);
            component.set('v.boolACRAvailable',true);
        } else {
            component.set('v.boolMyAccessBtn',false);
        }
    },
    enableDisableUseAccessBtnHelper : function(component, event, helper) {
        let objselectedAccountRecord = component.get('v.selectedAccountRecord');
        let strSelectRecord = JSON.stringify(objselectedAccountRecord);
        if($A.util.isUndefinedOrNull(strSelectRecord) || $A.util.isEmpty(strSelectRecord) || strSelectRecord == "{}"){
            component.set('v.disableshowAccess',false);
            component.set('v.validateCount',0);
            component.set('v.trustedAgentType','');
            component.set('v.boolDisableCodeSection',false);
            component.set("v.accessCode",'');
            component.set("v.accessCodeId",'');
            component.set("v.accessCodeUsage",0);
            component.set("v.validateResponse", "");
        }
    },
})
